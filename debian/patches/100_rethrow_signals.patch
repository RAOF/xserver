Index: xorg-server/hw/dmx/dmxinit.c
===================================================================
--- xorg-server.orig/hw/dmx/dmxinit.c	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/hw/dmx/dmxinit.c	2011-09-10 21:45:50.066123727 -0700
@@ -821,7 +821,7 @@
 /** This function is called in Xserver/os/utils.c from \a AbortServer().
  * We must ensure that backend and console state is restored in the
  * event the server shutdown wasn't clean. */
-void AbortDDX(enum ExitCode error)
+void SigAbortDDX(int signo, enum ExitCode error)
 {
     int i;
 
@@ -839,6 +839,11 @@
 }
 #endif
 
+void AbortDDX(enum ExitCode error)
+{
+    SigAbortDDX(0, error);
+}
+
 /** This function is called in Xserver/dix/main.c from \a main() when
  * dispatchException & DE_TERMINATE (which is the only way to exit the
  * main loop without an interruption. */
Index: xorg-server/hw/kdrive/src/kdrive.c
===================================================================
--- xorg-server.orig/hw/kdrive/src/kdrive.c	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/hw/kdrive/src/kdrive.c	2011-09-10 21:52:09.393274790 -0700
@@ -232,7 +232,7 @@
 }
 
 void
-AbortDDX(enum ExitCode error)
+SigAbortDDX(int signo, enum ExitCode error)
 {
     KdDisableScreens ();
     if (kdOsFuncs)
@@ -248,6 +248,11 @@
         OsAbort();
 }
 
+AbortDDX(enum ExitCode error)
+{
+    SigAbortDDX(0, error);
+}
+
 void
 ddxGiveUp (enum ExitCode error)
 {
Index: xorg-server/hw/vfb/InitOutput.c
===================================================================
--- xorg-server.orig/hw/vfb/InitOutput.c	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/hw/vfb/InitOutput.c	2011-09-10 21:53:51.404181875 -0700
@@ -201,11 +201,17 @@
 }
 
 void
-AbortDDX(enum ExitCode error)
+SigAbortDDX(int signo, enum ExitCode error)
 {
     ddxGiveUp(error);
 }
-
+ 
+void
+AbortDDX(enum ExitCode error)
+{
+    SigAbortDDX(0, error);
+}
+ 
 #ifdef __APPLE__
 void
 DarwinHandleGUI(int argc, char *argv[])
Index: xorg-server/hw/xfree86/common/xf86Events.c
===================================================================
--- xorg-server.orig/hw/xfree86/common/xf86Events.c	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/hw/xfree86/common/xf86Events.c	2011-09-10 21:45:50.066123727 -0700
@@ -348,6 +348,8 @@
 int
 xf86SigWrapper(int signo)
 {
+  static Bool beenhere = FALSE;
+
   if ((signo == SIGILL) && xf86SigIllHandler) {
     (*xf86SigIllHandler)();
     return 0; /* continue */
Index: xorg-server/hw/xfree86/common/xf86Init.c
===================================================================
--- xorg-server.orig/hw/xfree86/common/xf86Init.c	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/hw/xfree86/common/xf86Init.c	2011-09-11 09:58:17.741645191 -0700
@@ -895,14 +895,17 @@
 }
 
 /*
- * ddxGiveUp --
+ * ddxSigGiveUp --
  *      Device dependent cleanup. Called by by dix before normal server death.
  *      For SYSV386 we must switch the terminal back to normal mode. No error-
  *      checking here, since there should be restored as much as possible.
+ *
+ *      If a non-zero signo is passed, re-raise that signal rather than
+ *      calling abort().
  */
 
 void
-ddxGiveUp(enum ExitCode error)
+ddxSigGiveUp(int signo, enum ExitCode error)
 {
     int i;
 
@@ -929,24 +932,46 @@
     if (xorgHWOpenConsole)
 	xf86CloseConsole();
 
+    ErrorF (" ddxSigGiveUp: Closing log\n");
+
     xf86CloseLog(error);
 
     /* If an unexpected signal was caught, dump a core for debugging */
-    if (xf86Info.caughtSignal)
-	OsAbort();
+    if (xf86Info.caughtSignal) {
+        if (signo != 0) {
+            raise(signo);
+        } else {
+            OsAbort();
+        }
+    }
 }
 
+/*
+ * ddxGiveUp --
+ *      Device dependent cleanup. Called by by dix before normal server death.
+ *      For SYSV386 we must switch the terminal back to normal mode. No error-
+ *      checking here, since there should be restored as much as possible.
+ */
+
+void
+ddxGiveUp(enum ExitCode error)
+{
+    ddxSigGiveUp(0, error);
+}
 
 
 /*
- * AbortDDX --
+ * SigAbortDDX --
  *      DDX - specific abort routine.  Called by AbortServer(). The attempt is
  *      made to restore all original setting of the displays. Also all devices
  *      are closed.
+ *
+ *      If a non-zero signo is passed, re-raise that signal rather than calling
+ *      abort()
  */
 
 void
-AbortDDX(enum ExitCode error)
+SigAbortDDX(int signo, enum ExitCode error)
 {
   int i;
 
@@ -979,7 +1004,20 @@
    * This is needed for an abnormal server exit, since the normal exit stuff
    * MUST also be performed (i.e. the vt must be left in a defined state)
    */
-  ddxGiveUp(error);
+  ddxSigGiveUp(signo, error);
+}
+
+/*
+ * AbortDDX --
+ *      DDX - specific abort routine.  The attempt is made to restore
+ *      all original setting of the displays. Also all devices are
+ *      closed.
+ */
+
+void
+AbortDDX(enum ExitCode error)
+{
+    SigAbortDDX(0, error);
 }
 
 void
Index: xorg-server/hw/xnest/Init.c
===================================================================
--- xorg-server.orig/hw/xnest/Init.c	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/hw/xnest/Init.c	2011-09-10 21:45:50.076124422 -0700
@@ -114,12 +114,17 @@
 /*
  * DDX - specific abort routine.  Called by AbortServer().
  */
-void AbortDDX(enum ExitCode error)
+void SigAbortDDX(int signo, enum ExitCode error)
 {
   xnestDoFullGeneration = True;
   xnestCloseDisplay();
 }
 
+void AbortDDX(enum ExitCode error)
+{
+    SigAbortDDX(0, error);
+}
+
 /* Called by GiveUp(). */
 void ddxGiveUp(enum ExitCode error)
 {
Index: xorg-server/hw/xquartz/darwin.c
===================================================================
--- xorg-server.orig/hw/xquartz/darwin.c	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/hw/xquartz/darwin.c	2011-09-10 22:01:07.976518255 -0700
@@ -773,14 +773,20 @@
 
 
 /*
- * AbortDDX --
+ * [Sig]AbortDDX --
  *      DDX - specific abort routine.  Called by AbortServer(). The attempt is
  *      made to restore all original setting of the displays. Also all devices
  *      are closed.
  */
 _X_NORETURN
-void AbortDDX( enum ExitCode error ) {
+void SigAbortDDX( int signo, enum ExitCode error )
+{
     ErrorF( "   AbortDDX\n" );
     OsAbort();
 }
 
+_X_NORETURN
+void AbortDDX( enum ExitCode error )
+{
+    SigAbortDDX(signo, error);
+}
Index: xorg-server/hw/xwin/InitOutput.c
===================================================================
--- xorg-server.orig/hw/xwin/InitOutput.c	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/hw/xwin/InitOutput.c	2011-09-10 22:02:02.515804736 -0700
@@ -258,7 +258,7 @@
 
 /* See Porting Layer Definition - p. 57 */
 void
-AbortDDX (enum ExitCode error)
+SigAbortDDX (int signo, enum ExitCode error)
 {
 #if CYGDEBUG
   winDebug ("AbortDDX\n");
@@ -266,6 +266,12 @@
   ddxGiveUp (error);
 }
 
+void
+AbortDDX (enum ExitCode error)
+{
+    SigAbortDDX(0, error);
+}
+
 #ifdef __CYGWIN__
 /* hasmntopt is currently not implemented for cygwin */
 static const char *winCheckMntOpt(const struct mntent *mnt, const char *opt)
Index: xorg-server/include/os.h
===================================================================
--- xorg-server.orig/include/os.h	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/include/os.h	2011-09-11 09:51:52.766866712 -0700
@@ -466,7 +466,9 @@
     EXIT_ERR_DRIVERS	= 3,
 };
 
+extern _X_EXPORT void SigAbortDDX(int signo, enum ExitCode error);
 extern _X_EXPORT void AbortDDX(enum ExitCode error);
+extern _X_EXPORT void ddxSigGiveUp(int signo, enum ExitCode error);
 extern _X_EXPORT void ddxGiveUp(enum ExitCode error);
 extern _X_EXPORT int TimeSinceLastInputEvent(void);
 
Index: xorg-server/os/log.c
===================================================================
--- xorg-server.orig/os/log.c	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/os/log.c	2011-09-11 09:51:21.555668560 -0700
@@ -89,6 +89,8 @@
 #include <stdlib.h>	/* for malloc() */
 #include <errno.h>
 
+#include <signal.h>	/* for raise() */
+
 #include "input.h"
 #include "site.h"
 #include "opaque.h"
@@ -403,9 +405,11 @@
 
 void
 AbortServer(void) _X_NORETURN;
+void
+SigAbortServer(int signo) _X_NORETURN;
 
 void
-AbortServer(void)
+SigAbortServer(int signo)
 {
 #ifdef XF86BIGFONT
     XF86BigfontCleanup();
@@ -413,11 +417,22 @@
     CloseWellKnownConnections();
     OsCleanup(TRUE);
     CloseDownDevices();
-    AbortDDX(EXIT_ERR_ABORT);
+    SigAbortDDX(signo, EXIT_ERR_ABORT);
     fflush(stderr);
-    if (CoreDump)
-	OsAbort();
-    exit (1);
+    if (CoreDump) {
+	if (signo != 0)
+	    raise(signo);
+	else
+	    OsAbort();
+    } else {
+	exit (1);
+    }
+}
+
+void
+AbortServer()
+{
+    SigAbortServer(0);
 }
 
 #define AUDIT_PREFIX "AUDIT: %s: %ld: "
@@ -518,6 +533,27 @@
 }
 
 void
+FatalSignal(int signo)
+{
+    static Bool beenhere = FALSE;
+
+    if (beenhere)
+	ErrorF("\nFatalSignal re-entered, aborting\n");
+    else
+	ErrorF("\nCaught signal %d (%s). Server aborting\n",
+               signo, strsignal(signo));
+
+    if (!beenhere)
+	OsVendorFatalError();
+    if (!beenhere) {
+	beenhere = TRUE;
+	SigAbortServer(signo);
+    } else
+	abort();
+    /*NOTREACHED*/
+}
+
+void
 FatalError(const char *f, ...)
 {
     va_list args;
Index: xorg-server/os/osinit.c
===================================================================
--- xorg-server.orig/os/osinit.c	2011-09-10 21:40:27.000000000 -0700
+++ xorg-server/os/osinit.c	2011-09-10 21:45:50.076124422 -0700
@@ -138,13 +138,13 @@
           case SIGBUS:
           case SIGILL:
           case SIGFPE:
+	      signal(signo,SIG_DFL);
 	      ErrorF("%s at address %p\n", strsignal(signo), sip->si_addr);
       }
   }
 #endif
 
-  FatalError("Caught signal %d (%s). Server aborting\n",
-	     signo, strsignal(signo));
+  FatalSignal(signo);
 }
 
 void
