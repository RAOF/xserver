From fe5802680b5ecf5ecef55b839f2f555882207d41 Mon Sep 17 00:00:00 2001
From: Bryce Harrington <bryce@canonical.com>
Date: Wed, 13 Feb 2013 11:39:34 -0800
Subject: [PATCH] If drm device couldn't be opened, keep trying for a sec.

The kernel returns EACCES or EAGAIN on drm open when the drm device is
currently unavailable, such as if it is in use by another process
(e.g. plymouth), or hasn't finished initializing (e.g. on a really fast
SSD).  Check for errors when trying to open the device, and continue
retrying for a short period before giving up.

Fixes: https://bugs.launchpad.net/ubuntu/+source/xorg-server/+bug/982889

Signed-off-by: Bryce Harrington <bryce@canonical.com>
---
 hw/xfree86/os-support/linux/lnx_platform.c |   29 +++++++++++++++++++++++++---
 1 file changed, 26 insertions(+), 3 deletions(-)

diff --git a/config/udev.c b/config/udev.c
index 454838f..af133d2 100644
--- a/config/udev.c
+++ b/config/udev.c
@@ -98,7 +98,7 @@ device_added(struct udev_device *udev_device)
         if (strncmp(sysname, "card", 4) != 0)
             return;
 
-        LogMessage(X_INFO, "config/udev: Adding drm device (%s)\n", path);
+        LogMessage(X_INFO, "config/udev: Adding drm device (%s) %s %s\n", path, sysname, syspath);
 
         config_udev_odev_setup_attribs(path, syspath, NewGPUDeviceRequest);
         return;
@@ -267,7 +267,7 @@ device_removed(struct udev_device *device)
 
         if (strncmp(sysname,"card", 4) != 0)
             return;
-        ErrorF("removing GPU device %s %d\n", syspath, path);
+        ErrorF("removing GPU device %s %s\n", syspath, path);
         if (!path)
             return;
 
@@ -437,6 +437,16 @@ config_udev_odev_setup_attribs(const char *path, const char *syspath,
     if (ret == FALSE)
         goto fail;
 
+    if (strstr(syspath, "/devices/pci")) {
+        const char *end = strstr(syspath, "/drm/card");
+        if (end && end - 12 > syspath) {
+            char pci_str[17] = "pci:";
+
+            strncpy(pci_str + 4, end - 12, 12);
+            ret = config_odev_add_attribute(attribs, ODEV_ATTRIB_BUSID, pci_str);
+        }
+    }
+
     /* ownership of attribs is passed to probe layer */
     probe_callback(attribs);
     return TRUE;
diff --git a/hw/xfree86/os-support/linux/lnx_platform.c b/hw/xfree86/os-support/linux/lnx_platform.c
index 76f5583..11bb9fc 100644
--- a/hw/xfree86/os-support/linux/lnx_platform.c
+++ b/hw/xfree86/os-support/linux/lnx_platform.c
@@ -17,36 +17,6 @@
 
 #include "hotplug.h"
 
-static Bool
-get_drm_info(struct OdevAttributes *attribs, char *path)
-{
-    drmSetVersion sv;
-    char *buf;
-    int fd;
-
-    fd = open(path, O_RDWR, O_CLOEXEC);
-    if (fd == -1)
-        return FALSE;
-
-    sv.drm_di_major = 1;
-    sv.drm_di_minor = 4;
-    sv.drm_dd_major = -1;       /* Don't care */
-    sv.drm_dd_minor = -1;       /* Don't care */
-    if (drmSetInterfaceVersion(fd, &sv)) {
-        ErrorF("setversion 1.4 failed\n");
-        return FALSE;
-    }
-
-    xf86_add_platform_device(attribs);
-
-    buf = drmGetBusid(fd);
-    xf86_add_platform_device_attrib(xf86_num_platform_devices - 1,
-                                    ODEV_ATTRIB_BUSID, buf);
-    drmFreeBusid(buf);
-    close(fd);
-    return TRUE;
-}
-
 Bool
 xf86PlatformDeviceCheckBusID(struct xf86_platform_device *device, const char *busid)
 {
@@ -119,10 +89,7 @@ xf86PlatformDeviceProbe(struct OdevAttributes *attribs)
     LogMessage(X_INFO, "config/udev: Adding drm device (%s)\n",
                path);
 
+    xf86_add_platform_device(attribs);
-    ret = get_drm_info(attribs, path);
-    if (ret == FALSE)
-        goto out_free;
-
     return;
 
 out_free:
