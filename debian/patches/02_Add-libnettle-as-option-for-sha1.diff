From a6119f6cd7e47041044fcc9c15a6e3f9f189b3ed Mon Sep 17 00:00:00 2001
From: Cyril Brulebois <kibi@debian.org>
Date: Sun, 14 Mar 2010 22:01:47 +0100
Subject: [PATCH] Add libnettle as option for sha1.

Signed-off-by: Cyril Brulebois <kibi@debian.org>

[jcristau: forward-ported from 1.7 to 1.8]
Signed-off-by: Julien Cristau <jcristau@debian.org>
---
--- a/configure.ac
+++ b/configure.ac
@@ -1361,7 +1361,7 @@ CORE_INCS='-I$(top_srcdir)/include -I$(t
 
 # SHA1 hashing
 AC_ARG_WITH([sha1],
-            [AS_HELP_STRING([--with-sha1=libc|libmd|libgcrypt|libcrypto|libsha1|CommonCrypto|CryptoAPI],
+            [AS_HELP_STRING([--with-sha1=libc|libmd|libgcrypt|libcrypto|libsha1|CommonCrypto|CryptoAPI|nettle],
                             [choose SHA1 implementation])])
 AC_CHECK_FUNC([SHA1Init], [HAVE_SHA1_IN_LIBC=yes])
 if test "x$with_sha1" = x && test "x$HAVE_SHA1_IN_LIBC" = xyes; then
@@ -1457,6 +1457,16 @@ if test "x$with_sha1" = xlibcrypto; then
 		SHA1_CFLAGS="$OPENSSL_CFLAGS"
 	fi
 fi
+AC_CHECK_LIB([nettle], [nettle_sha1_init], [HAVE_LIBNETTLE=yes])
+if test "x$with_sha1" = x && test "x$HAVE_LIBNETTLE" = xyes; then
+	with_sha1=nettle
+fi
+if test "x$with_sha1" = xnettle; then
+	AC_DEFINE([HAVE_SHA1_IN_LIBNETTLE], [1],
+	          [Use libnettle SHA1 functions])
+	# XXX hack for d-i: use the static lib
+	SHA1_LIBS=-l:libnettle.a
+fi
 AC_MSG_CHECKING([for SHA1 implementation])
 if test "x$with_sha1" = x; then
 	AC_MSG_ERROR([No suitable SHA1 implementation found])
--- a/include/dix-config.h.in
+++ b/include/dix-config.h.in
@@ -160,6 +160,9 @@
 /* Define to use libsha1 for SHA1 */
 #undef HAVE_SHA1_IN_LIBSHA1
 
+/* Define to use libnettle SHA1 */
+#undef HAVE_SHA1_IN_LIBNETTLE
+
 /* Define to 1 if you have the `shmctl64' function. */
 #undef HAVE_SHMCTL64
 
--- a/os/xsha1.c
+++ b/os/xsha1.c
@@ -190,6 +190,32 @@ x_sha1_final(void *ctx, unsigned char re
     return 1;
 }
 
+#elif defined(HAVE_SHA1_IN_LIBNETTLE)
+
+#include <nettle/sha.h>
+
+void *x_sha1_init(void)
+{
+    struct sha1_ctx *ctx = malloc(sizeof(*ctx));
+    if (!ctx)
+        return NULL;
+    sha1_init(ctx);
+    return ctx;
+}
+
+int x_sha1_update(void *ctx, void *data, int size)
+{
+    sha1_update(ctx, size, data);
+    return 1;
+}
+
+int x_sha1_final(void *ctx, unsigned char result[20])
+{
+    sha1_digest(ctx, 20, result);
+    free(ctx);
+    return 1;
+}
+
 #else                           /* Use OpenSSL's libcrypto */
 
 #include <stddef.h>             /* buggy openssl/sha.h wants size_t */
